{"ast":null,"code":"import _classCallCheck from \"/Users/zach9040/Documents/reactdecal/pomodoist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zach9040/Documents/reactdecal/pomodoist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zach9040/Documents/reactdecal/pomodoist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zach9040/Documents/reactdecal/pomodoist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zach9040/Documents/reactdecal/pomodoist/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/zach9040/Documents/reactdecal/pomodoist/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/zach9040/Documents/reactdecal/pomodoist/src/components/Timer.jsx\";\nimport React from 'react';\nimport formatSecondsToMinutesAndSeconds from '../lib/formatSecondsToMinutesAndSeconds';\nimport PausePlayButton from './PausePlayButton';\nimport ResetButton from './ResetButton';\nimport '../styles/timer.css';\nvar WORK_TIME = 2;\nvar BREAK_TIME = 1;\nvar MODES_TIMES = {\n  WORK: WORK_TIME,\n  BREAK: BREAK_TIME\n};\nvar TIME_STEP = 1000;\n\nvar Timer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  function Timer(props) {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timer).call(this, props));\n    _this.setTimer = _this.setTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.stop = _this.stop.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.tick = _this.tick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.completeSession = _this.completeSession.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleIsPlaying = _this.toggleIsPlaying.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reset = _this.reset.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      mode: props.mode,\n      time: MODES_TIMES[props.mode],\n      isPlaying: props.autoPlays\n    };\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$state = this.state,\n          mode = _this$state.mode,\n          time = _this$state.time;\n      this.setTimer(mode, time);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.stop();\n    }\n  }, {\n    key: \"setTimer\",\n    value: function setTimer(mode, time) {\n      this.setState({\n        mode: mode,\n        time: time\n      });\n      this.timerID = setInterval(this.tick, TIME_STEP);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.setState({\n        isPlaying: false\n      });\n      clearInterval(this.timerID);\n    }\n  }, {\n    key: \"tick\",\n    value: function tick() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          mode = _this$state2.mode,\n          isPlaying = _this$state2.isPlaying,\n          time = _this$state2.time;\n\n      if (isPlaying) {\n        this.setState(function (prevState) {\n          return {\n            time: prevState.time - 1\n          };\n        }, function () {\n          if (time === 0) {\n            _this2.stop();\n\n            if (mode === 'WORK') {\n              _this2.setTimer('BREAK', MODES_TIMES.BREAK);\n            }\n\n            if (mode === 'BREAK') {\n              _this2.completeSession();\n\n              _this2.setTimer('WORK', MODES_TIMES.WORK);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"toggleIsPlaying\",\n    value: function toggleIsPlaying() {\n      this.setState(function (prevState) {\n        return {\n          isPlaying: !prevState.isPlaying\n        };\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.stop();\n      this.setTimer('WORK', MODES_TIMES.WORK, false);\n    }\n  }, {\n    key: \"completeSession\",\n    value: function completeSession() {\n      var onSessionComplete = this.props.onSessionComplete;\n      onSessionComplete();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          mode = _this$state3.mode,\n          time = _this$state3.time,\n          isPlaying = _this$state3.isPlaying;\n      var formattedTime = formatSecondsToMinutesAndSeconds(time);\n      var timerClassName = \"card timer-container \".concat(mode === 'WORK' ? 'timer-work' : 'timer-break');\n      return React.createElement(\"div\", {\n        className: timerClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(ResetButton, {\n        onClick: this.reset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, formattedTime), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(PausePlayButton, {\n        isPlaying: isPlaying,\n        onClick: this.toggleIsPlaying,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nexport default Timer;","map":{"version":3,"sources":["/Users/zach9040/Documents/reactdecal/pomodoist/src/components/Timer.jsx"],"names":["React","formatSecondsToMinutesAndSeconds","PausePlayButton","ResetButton","WORK_TIME","BREAK_TIME","MODES_TIMES","WORK","BREAK","TIME_STEP","Timer","props","setTimer","bind","stop","tick","completeSession","toggleIsPlaying","reset","state","mode","time","isPlaying","autoPlays","setState","timerID","setInterval","clearInterval","prevState","onSessionComplete","formattedTime","timerClassName","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport formatSecondsToMinutesAndSeconds from '../lib/formatSecondsToMinutesAndSeconds';\nimport PausePlayButton from './PausePlayButton';\nimport ResetButton from './ResetButton';\nimport '../styles/timer.css';\n\nconst WORK_TIME = 2;\nconst BREAK_TIME = 1;\n\nconst MODES_TIMES = {\n  WORK: WORK_TIME,\n  BREAK: BREAK_TIME,\n};\n\nconst TIME_STEP = 1000;\n\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setTimer = this.setTimer.bind(this);\n    this.stop = this.stop.bind(this);\n    this.tick = this.tick.bind(this);\n    this.completeSession = this.completeSession.bind(this);\n    this.toggleIsPlaying = this.toggleIsPlaying.bind(this);\n    this.reset = this.reset.bind(this);\n\n    this.state = {\n      mode: props.mode,\n      time: MODES_TIMES[props.mode],\n      isPlaying: props.autoPlays,\n    };\n  }\n\n  componentDidMount() {\n    const { mode, time } = this.state;\n    this.setTimer(mode, time);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  setTimer(mode, time) {\n    this.setState({\n      mode,\n      time,\n    });\n\n    this.timerID = setInterval(this.tick, TIME_STEP);\n  }\n\n  stop() {\n    this.setState({ isPlaying: false });\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    const { mode, isPlaying, time } = this.state;\n\n    if (isPlaying) {\n      this.setState(prevState => ({\n        time: prevState.time - 1,\n      }),\n      () => {\n        if (time === 0) {\n          this.stop();\n\n          if (mode === 'WORK') {\n            this.setTimer('BREAK', MODES_TIMES.BREAK);\n          }\n\n          if (mode === 'BREAK') {\n            this.completeSession();\n            this.setTimer('WORK', MODES_TIMES.WORK);\n          }\n        }\n      });\n    }\n  }\n\n  toggleIsPlaying() {\n    this.setState(prevState => ({ isPlaying: !prevState.isPlaying }));\n  }\n\n  reset() {\n    this.stop();\n    this.setTimer('WORK', MODES_TIMES.WORK, false);\n  }\n\n  completeSession() {\n    const { onSessionComplete } = this.props;\n    onSessionComplete();\n  }\n\n\n  render() {\n    const { mode, time, isPlaying } = this.state;\n    const formattedTime = formatSecondsToMinutesAndSeconds(time);\n    const timerClassName = `card timer-container ${mode === 'WORK' ? 'timer-work' : 'timer-break'}`;\n    return (\n      <div className={timerClassName}>\n        <div>\n          <ResetButton onClick={this.reset} />\n        </div>\n        <div>{formattedTime}</div>\n        <div>\n          <PausePlayButton isPlaying={isPlaying} onClick={this.toggleIsPlaying} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}